Modules := mut ();
@include "std/constraint.onion";
@include "std/result.onion";

@required 'stdlib';
print := (a => Union(Float, Integer), b => Union(Float, Integer)) -> {
    stdlib.io.println('a:', a, 'b:', b);
};

// Example usage
print(3.14, 42); // Valid usage
// print(3.14, 'not a number'); // Invalid usage, will raise an error

DynamicCheck := (v?) -> {
    return stdlib.io.input("Please enter `Hello`: ") == v;
};

// Example usage of DynamicCheck
f := (v => DynamicCheck) -> {
    stdlib.io.println('DynamicCheck value:', v);
    v
};

stdlib.io.println(try(() -> f("Hello")).unwrap_or("Failed to match DynamicCheck"));

foo := (x => Positive) -> {
    stdlib.io.println('foo called with:', x);
    "Success!"
};

// Example usage of foo
stdlib.io.println(try(() -> foo(10)).unwrap_or("Failed to match Positive"));
stdlib.io.println(try(() -> foo(-5)).unwrap_or("Failed to match Positive")); // Invalid usage, will raise an error


interfaceA := interface {
    print => () -> {
        stdlib.io.println("Hello from interfaceA");
    },
    repr => () -> {
        stdlib.io.println(self);
    },
    get_data => () -> {
        return self.data;
    }
};

interfaceB := interface {
    print => () -> {
        stdlib.io.println("Hello from interfaceB");
    },
    repr => () -> {
        stdlib.io.println(self);
    },
    get_data => () -> {
        return self.data;
    }
};

instanceA := interfaceA.new {
    data => "This is instanceA",
};


some_function_A := (obj => InstanceOf(interfaceA)) -> {
    stdlib.io.println("some_function called with:", obj.get_data());
};

some_function_B := (obj => InstanceOf(interfaceB)) -> {
    stdlib.io.println("some_function called with:", obj.get_data());
};

instanceA.print();

stdlib.io.println("Is instanceA an instance of interfaceA? ", interfaceA.check(instanceA));
some_function_A(instanceA); // Valid usage

stdlib.io.println("Is instanceA an instance of interfaceB? ", interfaceB.check(instanceA));
// This will raise an error because instanceA does not implement interfaceB
stdlib.io.println(
    try(() -> some_function_B(instanceA)).unwrap_or("Failed to match InstanceOf(interfaceA)")
)
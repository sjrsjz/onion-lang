@required 'stdlib';
@include "std/tui_colors.onion";

w := 176.0;
h := 88.0;
max_iter := 200;

// Interesting Mandelbrot set region coordinates
// 1. Seahorse Valley: center (-0.75, 0.1), zoom 0.01
// 2. Spiral Region: center (-0.8, 0.156), zoom 0.005
// 3. Lightning Region: center (-1.25, 0), zoom 0.02
// 4. Classic Panorama: center (-0.5, 0), zoom 1.5

center_x := -0.8;
center_y := 0.156;
zoom := 0.005;

// Function to select color based on escape speed
get_color := mut (iterations?) -> {
    if (iterations == max_iter) {
        // Inside the set, use black
        return colors.black;
    } else if (iterations < 15) {
        // Fast escape, use blue
        return colors.blue;
    } else if (iterations < 30) {
        // Medium escape, use cyan
        return colors.cyan;
    } else if (iterations < 45) {
        // Slower escape, use green
        return colors.green;
    } else if (iterations < 60) {
        // Slow escape, use yellow
        return colors.yellow;
    } else if (iterations < 80) {
        // Very slow escape, use red
        return colors.red;
    } else {
        // Extremely slow escape, use magenta
        return colors.magenta;
    };
};

y := mut 0.0;
while (y < h) {
    x := mut 0.0;
    while (x < w) {
        Zr := 0.0;
        Zi := 0.0;
        Tr := 0.0;
        Ti := 0.0;
        // Use new coordinate system to focus on interesting region
        Cr := center_x + (x - w / 2.0) * zoom / (w / 4.0);
        Ci := center_y + (y - h / 2.0) * zoom / (h / 4.0);

        i := 0;
        while (i < max_iter and Tr + Ti <= 4.0) (
            Zi := 2.0 * Zr * Zi + Ci;
            Zr := Tr - Ti + Cr;
            Tr := Zr * Zr;
            Ti := Zi * Zi;
            i := i + 1;
        );        // Not using `{}` to wrap the loop body for faster calculation in current scope, and variables can be shadowed directly without dereferencing mut
        // Select color and character based on escape speed
        color := get_color(i);
        if (i == max_iter) {
            // Inside the set, display solid block
            stdlib.io.print(color + "█" + colors.reset);
        } else {
            // Outside the set, display different characters and colors based on escape speed
            if (i < 25) {
                stdlib.io.print(color + "░" + colors.reset);
            } else if (i < 50) {
                stdlib.io.print(color + "▒" + colors.reset);
            } else {
                stdlib.io.print(color + "▓" + colors.reset);
            };
        };

        x = x + 1.0;
    };

    stdlib.io.println("");
    y = y + 1.0;
};

return undefined
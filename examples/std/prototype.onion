interface := (interface_definition?) -> {
    pointer := mut interface_definition;
    return (
        // Create a new instance and return a struct that implements the interface
        // When the VM accesses members, it first looks in the Pair's value; if not found, it then looks in the Pair's key
        new => (structure?) -> structure : pointer,
        // Check if an instance implements the interface
        // The check is performed by traversing the prototype chain
        check => (prototype?) -> {
            v := mut prototype;
            while true {
                if (typeof v == 'Pair') {
                    // Check if the Pair's value is the interface definition; the 'is' check is done by pointer comparison
                    if ((valueof v) is pointer) {
                        return true;
                    };
                    v = keyof v;
                } else break;
            };
            return false;
        },
    )
};


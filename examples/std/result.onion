@required 'Modules';
if (not keyof (sync (() -> Modules.Result))()) {
    // Define temporary Result constructor and helper functions
    _Result_Temp_Constructor := mut undefined;
    _Ok_Temp_Helper := (v?) -> _Result_Temp_Constructor.new(true : v);
    _Err_Temp_Helper := (v?) -> _Result_Temp_Constructor.new(false : v);

    // Configure temporary Result constructor
    _Result_Temp_Constructor = {
        @include "prototype.onion";
        // Interface definition for Result instance
        Result_Interface := interface {
            is_ok => () -> keyof keyof self,
            is_err => () -> not keyof keyof self,
            map => (f?) -> {
                if (self.is_ok()) {
                    return _Ok_Temp_Helper(f(valueof keyof self));
                } else {
                    return _Result_Temp_Constructor.new(keyof self);
                }
            },
            map_err => (f?) -> {
                if (self.is_err()) {
                    return _Err_Temp_Helper(f(valueof keyof self));
                } else {
                    return _Result_Temp_Constructor.new(keyof self);
                }
            },
            unwrap => () -> {
                if (self.is_ok()) {
                    return valueof keyof self;
                } else {
                    raise _Err_Temp_Helper("Result is an error");
                }
            },
            unwrap_or => (default?) -> {
                if (self.is_ok()) {
                    return valueof keyof self;
                } else {
                    return default;
                }
            },
            unwrap_or_else => (f?) -> {
                if (self.is_ok()) {
                    return valueof keyof self;
                } else {
                    return f(valueof keyof self);
                }
            },
            unwrap_err => () -> {
                if (self.is_err()) {
                    return valueof keyof self;
                } else {
                    raise _Err_Temp_Helper("Result is not an error");
                }
            }
        };
        Result_Interface // The result of this block is the interface, used to configure _Result_Temp_Constructor
    };

    // Cache the configured temporary Result constructor
    Modules = Modules + (Result => _Result_Temp_Constructor,);
};

// Assign the cached constructor to global Result
Result := Modules.Result;

// Redefine global Ok and Err helper functions using the cached global Result constructor
Ok := (v?) -> Result.new(true : v);
Err := (v?) -> Result.new(false : v);

try := (f?) -> {
    Result.new((sync f)())
};

@def(try_expr => "expr" -> {
    expr := ast.deserialize(expr);
    return ast.apply << (
        ast.variable("try"),
        ast.lambda_def(false,()) << ((), expr)
    );
});

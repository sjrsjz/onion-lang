@required stdlib;
pool := () -> {
    return (0..100).elements() |> (x?) -> {
        stdlib.io.println("处理元素:", x);
        stdlib.time.sleep_seconds(seconds => 0.1);
        return spawn () -> {
            stdlib.io.println("异步处理元素:", x);
            n := mut 0;
            while (n < 10) {
                stdlib.io.println("异步处理元素:", x, "计数:", n);
                n = n + 1;
                stdlib.time.sleep_seconds(seconds => 0.01);
            };
            return x;
        };
    };
};

tasks := async pool();
stdlib.io.println("处理结果:", valueof tasks);

(0..100).elements() |> (i?) -> {
    stdlib.io.println("任务:", i, "结果", valueof (valueof tasks)[i]);
};
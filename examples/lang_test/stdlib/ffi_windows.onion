// Advanced FFI Demo: Calling Windows API
@required 'stdlib';
@include "../../std/marcos.onion";

main := () -> {
    stdlib.io.println("==================================================");
    stdlib.io.println("=== Onion FFI Advanced Demo: Windows API Calls ===");
    stdlib.io.println("==================================================");
    stdlib.io.println("");

    // This demo only runs on Windows
    if (stdlib.sys.platform() != "windows") {
        stdlib.io.println("This demo is for Windows only. Skipping.");
        return;
    };

    stdlib.io.println("ðŸ“¦ Loading user32.dll...");
    user32_lib := stdlib.ffi.lib.load("user32.dll");

    if (user32_lib == null) {
        stdlib.io.println("âœ— Failed to load user32.dll. Cannot proceed.");
        return;
    };
    stdlib.io.println("âœ“ user32.dll loaded successfully!");
    stdlib.io.println("");

    // --- Demo 1: Simple Information Message Box ---
    stdlib.io.println("ðŸ”§ Demo 1: Simple Information Message Box");
    
    // Get MessageBoxW function handle
    // C signature: int MessageBoxW(HWND hWnd, LPCWSTR lpText, LPCWSTR lpCaption, UINT uType);
    // We use the 'W' version (MessageBoxW) because it accepts wide character strings (LPCWSTR),
    // which matches our `wstring` type perfectly.
    msgbox_handle := stdlib.ffi.lib.get_function(
        user32_lib,
        "MessageBoxW",
        "i32",
        ("pointer", "wstring", "wstring", "u32")
    );

    if (msgbox_handle == null) {
        stdlib.io.println("âœ— Failed to get MessageBoxW function handle.");
        return;
    };
    stdlib.io.println("âœ“ Got MessageBoxW handle.");

    // Prepare arguments
    // hWnd (HWND): window handle, pass 0 (null) for no owner window.
    // uType (UINT): message box style. 0x40 means MB_ICONINFORMATION.
    hwnd := stdlib.ffi.ctypes.pointer(0);
    text := stdlib.ffi.ctypes.string("This is a message from an Onion script!");
    caption := stdlib.ffi.ctypes.string("Onion FFI Demo");
    msg_type := stdlib.ffi.ctypes.u32(64); // 0x40 for MB_ICONINFORMATION

    stdlib.io.println("  Calling MessageBoxA with an informational message...");
    stdlib.io.println("  (A dialog box should appear on your screen)");

    // Call function
    result := stdlib.ffi.lib.call(
        msgbox_handle,
        (hwnd, text, caption, msg_type)
    );

    stdlib.io.println(@strcat("  MessageBoxA returned: ", $valueof result, " (1 means OK was clicked)"));
    stdlib.io.println("");


    // --- Demo 2: Question Message Box with Yes/No/Cancel ---
    stdlib.io.println("ðŸ”§ Demo 2: Question Message Box with Yes/No/Cancel");

    // Prepare arguments
    // uType: MB_YESNOCANCEL | MB_ICONQUESTION (0x03 | 0x20)
    q_text := stdlib.ffi.ctypes.string("Do you enjoy using Onion Language's FFI?");
    q_caption := stdlib.ffi.ctypes.string("Question");
    q_type := stdlib.ffi.ctypes.u32(35); // 3 (MB_YESNOCANCEL) + 32 (MB_ICONQUESTION)

    stdlib.io.println("  Calling MessageBoxA with a question...");
    stdlib.io.println("  (Please click a button on the dialog box)");

    // Call function
    q_result_val := stdlib.ffi.lib.call(
        msgbox_handle,
        (hwnd, q_text, q_caption, q_type)
    );
    q_result := valueof q_result_val;

    stdlib.io.println(@strcat("  MessageBoxA returned: ", $q_result));

    // Parse return value
    // IDYES = 6, IDNO = 7, IDCANCEL = 2
    if (q_result == 6) {
        stdlib.io.println("  You clicked 'Yes'. That's great to hear!");
    } else if (q_result == 7) {
        stdlib.io.println("  You clicked 'No'. We'll keep improving!");
    } else if (q_result == 2) {
        stdlib.io.println("  You clicked 'Cancel'.");
    } else {
        stdlib.io.println("  An unexpected button was clicked or the dialog was closed.");
    };
    stdlib.io.println("");

    stdlib.io.println("==================================================");
    stdlib.io.println("=== Windows API Demo Complete ===");
    stdlib.io.println("==================================================");
};

main();
return undefined;
@required 'stdlib';
@def(add => (x?, y?) -> x + y);
const_value := @add(1, 2);
stdlib.io.println("has add : ", @ifdef "add");
stdlib.io.println("add(1, 2) = ", const_value);
@undef "add";
// const_value := @add(1, 2); // 这行代码会报错，因为 add 已经被取消定义了

@ast.let("x") << (1,); // x := 1

stdlib.io.println("x", x);

lambda := @ast.lambda_def(false, ()) << (
    ("x", "y"), 
    ast.operation("+") << (
        ast.variable("x"), 
        ast.variable("y")
    )
);

stdlib.io.println("lambda(1, 2) = ", lambda(1, 2));

lambda2 := @ast.deserialize(
    $(x?, y?) -> x * y // `$` 用来序列化后续表达式为bytes
);

stdlib.io.println("lambda2(3, 4) = ", lambda2(3, 4));

@include "./sub_module.onion";

stdlib.io.println(foo());
stdlib.io.println(@bar());

@def(
    curry => "T_body_pair" -> ast.deserialize(
        $()->()
    ) << (
        keyof T_body_pair,
        ast.deserialize(
            valueof T_body_pair
        )
    )
);

curry_test := @curry(
    U => $@curry(
        V => $U / V
    )
); // 等效 "U" -> "V" -> U / V

stdlib.io.println("curry_test(10)(2) = ", curry_test(10)(2));
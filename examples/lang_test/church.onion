@required stdlib;

// 丘奇数字编码
// 0 = λf.λx.x
zero := (f?) -> (x?) -> x;

// 1 = λf.λx.f(x)
one := (f?) -> (x?) -> f(x);

// 2 = λf.λx.f(f(x))
two := (f?) -> (x?) -> f(f(x));

// 3 = λf.λx.f(f(f(x)))
three := (f?) -> (x?) -> f(f(f(x)));

// 后继函数：succ n = λf.λx.f(n f x)
succ := (n?) -> (f?) -> (x?) -> f(n(f)(x));

// 加法：add m n = λf.λx.m f (n f x)
add := (m?) -> (n?) -> (f?) -> (x?) -> m(f)(n(f)(x));

// 乘法：mult m n = λf.m(n f)
mult := (m?) -> (n?) -> (f?) -> m(n(f));

// 幂运算：power m n = n m
power := (m?) -> (n?) -> n(m);

// 前驱函数（较复杂的实现）
pred := (n?) -> (f?) -> (x?) -> {
    pair := (a?) -> (b?) -> (g?) -> g(a)(b);
    fst := (p?) -> p((a?) -> (b?) -> a);
    snd := (p?) -> p((a?) -> (b?) -> b);
    
    step := (p?) -> pair(snd(p))(f(snd(p)));
    initial := pair(x)(x);
    
    return fst(n(step)(initial));
};

// 减法：sub m n = n pred m
sub := (m?) -> (n?) -> n(pred)(m);

// 布尔值编码
true_church := (x?) -> (y?) -> x;
false_church := (x?) -> (y?) -> y;

// 逻辑非 - 避免使用关键字 not
negate := (b?) -> (x?) -> (y?) -> b(y)(x);

// 逻辑与
and := (p?) -> (q?) -> p(q)(p);

// 逻辑或
or := (p?) -> (q?) -> p(p)(q);

// 判断是否为零
is_zero := (n?) -> n((x?) -> false_church)(true_church);

// 小于等于判断
leq := (m?) -> (n?) -> is_zero(sub(m)(n));

// 等于判断
eq := (m?) -> (n?) -> and(leq(m)(n))(leq(n)(m));

// 条件表达式
if_then_else := (p?) -> (x?) -> (y?) -> p(x)(y);

// 转换为普通数字的辅助函数
to_number := (church_num?) -> {
    inc := (x?) -> x + 1;
    return church_num(inc)(0);
};

// 转换为布尔值的辅助函数
to_bool := (church_bool?) -> church_bool(true)(false);

// 测试函数
test_church := () -> {
    stdlib.io.println("=== 丘奇编码测试 ===");
    
    // 测试数字
    stdlib.io.println("zero: ", to_number(zero));
    stdlib.io.println("one: ", to_number(one));
    stdlib.io.println("two: ", to_number(two));
    stdlib.io.println("three: ", to_number(three));
    
    // 测试后继
    four := succ(three);
    stdlib.io.println("succ(three): ", to_number(four));
    
    // 测试加法
    five := add(two)(three);
    stdlib.io.println("add(two)(three): ", to_number(five));
    
    // 测试乘法
    six := mult(two)(three);
    stdlib.io.println("mult(two)(three): ", to_number(six));
    
    // 测试幂运算
    eight := power(two)(three);
    stdlib.io.println("power(two)(three): ", to_number(eight));
    
    // 测试前驱
    two_pred := pred(three);
    stdlib.io.println("pred(three): ", to_number(two_pred));
    
    // 测试减法
    one_sub := sub(three)(two);
    stdlib.io.println("sub(three)(two): ", to_number(one_sub));
    
    // 测试布尔值
    stdlib.io.println("true_church: ", to_bool(true_church));
    stdlib.io.println("false_church: ", to_bool(false_church));
    
    // 修复逻辑运算的调用方式 - 使用 negate 替代 not
    not_true := negate(true_church);
    stdlib.io.println("negate(true): ", to_bool(not_true));
    
    and_result := and(true_church)(false_church);
    stdlib.io.println("and(true)(false): ", to_bool(and_result));
    
    or_result := or(true_church)(false_church);
    stdlib.io.println("or(true)(false): ", to_bool(or_result));
    
    // 测试比较
    stdlib.io.println("is_zero(zero): ", to_bool(is_zero(zero)));
    stdlib.io.println("is_zero(one): ", to_bool(is_zero(one)));
    stdlib.io.println("eq(two)(two): ", to_bool(eq(two)(two)));
    stdlib.io.println("eq(two)(three): ", to_bool(eq(two)(three)));
    stdlib.io.println("leq(two)(three): ", to_bool(leq(two)(three)));
    
    // 条件表达式测试
    condition := eq(two)(two);
    result := if_then_else(condition)("相等")("不相等");
    stdlib.io.println("条件表达式测试: ", result);
};

// 执行测试
test_church();
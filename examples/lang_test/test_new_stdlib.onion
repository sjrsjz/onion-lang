// Test file for new stdlib modules: sys, os, fs
@required stdlib;

main := () -> {
    // 测试 sys 模块
    stdlib.io.println("=== Testing sys module ===");
    
    platform := stdlib.sys.platform();
    stdlib.io.println("Platform: " + platform);
    
    arch := stdlib.sys.arch();
    stdlib.io.println("Architecture: " + arch);
    
    cwd := stdlib.sys.getcwd();
    stdlib.io.println("Current working directory: " + cwd);
    
    stdlib.io.println("");
    
    // 测试 os 模块
    stdlib.io.println("=== Testing os module ===");
    
    username := stdlib.os.username();
    stdlib.io.println("Username: " + username);
    
    temp := stdlib.os.temp_dir();
    stdlib.io.println("Temp directory: " + temp);
    
    path_exists := stdlib.os.path_exists(".");
    stdlib.io.println("Current directory exists: ", path_exists);
    
    is_dir := stdlib.os.is_dir(".");
    stdlib.io.println("Current path is directory: ", is_dir);
    
    stdlib.io.println("");
    
    // 测试 fs 模块
    stdlib.io.println("=== Testing fs module ===");
    
    test_content := "Hello, this is a test file!";
    stdlib.fs.write_file("test_stdlib.txt", test_content);
    stdlib.io.println("Created test file: test_stdlib.txt");
    
    read_content := stdlib.fs.read_file("test_stdlib.txt");
    stdlib.io.println("Read file content: ", read_content);
    
    file_exists := stdlib.fs.exists("test_stdlib.txt");
    stdlib.io.println("Test file exists: ", file_exists);
    
    // 清理测试文件
    stdlib.fs.remove_file("test_stdlib.txt");
    stdlib.io.println("Cleaned up test file");
    
    stdlib.io.println("");
    stdlib.io.println("=== All tests completed ===");
};

main();

Modules := mut ();
Positive := (x?) -> x > 0;
Negative := (x?) -> x < 0;
Zero := (x?) -> x == 0;
Any := (x?) -> true;
Lambda := (x?) -> typeof x == 'Lambda';
CannotAssign := (x?) -> raise "You should just use default value of parameter, not assign it!";

@required 'stdlib';
@include "../../std/marcos.onion";
@include "../../std/result.onion";

add_positive := (a => Positive, b => Positive) -> {
    return a + b;
};

add_negative := (a => Negative, b => Negative) -> {
    return a + b;
};


x := 1;
foo := (y?) -> {
    stdlib.io.println(@strcat("foo called with y: ", $y, " and x: ", $x));
    return y + x;
};

stdlib.io.println(
    try(() -> {
        add_positive(1, 2) // This should work
    }).unwrap_or_else(
        (err?) -> @strcat("Error: ", $err)
    )
);

stdlib.io.println(
    try(() -> {
        add_positive(1, -2) // This should fail
    }).unwrap_or_else(
        (err?) -> @strcat("Error: ", $err)
    )
);

stdlib.io.println(
    try(() -> {
        foo(1) // This should work
    }).unwrap_or_else(
        (err?) -> @strcat("Error: ", $err)
    )
);

stdlib.io.println(
    try(() -> {
        foo(1, 2) // This should fail because x is not allowed to be assigned
    }).unwrap_or_else(
        (err?) -> @strcat("Error: ", $err)
    )
);

@include "../../std/option.onion";
map_to := (x => Option.check, f => Lambda) -> {
    if (x.is_some()) {
        return Some(f(x.unwrap()));
    } else {
        return None();
    }
};

stdlib.io.println(
    map_to(None(), (v?) -> v * 2).unwrap_or("No value")
);
// 数学函数可视化器 - 动态图形绘制
@required stdlib;

colors := {
    // 前景色
    'black': "\u001b[30m",
    'red': "\u001b[31m",
    'green': "\u001b[32m",
    'yellow': "\u001b[33m",
    'blue': "\u001b[34m",
    'magenta': "\u001b[35m",
    'cyan': "\u001b[36m",
    'white': "\u001b[37m",
    'bright_black': "\u001b[90m",
    'bright_red': "\u001b[91m",
    'bright_green': "\u001b[92m",
    'bright_yellow': "\u001b[93m",
    'bright_blue': "\u001b[94m",
    'bright_magenta': "\u001b[95m",
    'bright_cyan': "\u001b[96m",
    'bright_white': "\u001b[97m",

    // 背景色
    'bg_black': "\u001b[40m",
    'bg_red': "\u001b[41m",
    'bg_green': "\u001b[42m",
    'bg_yellow': "\u001b[43m",
    'bg_blue': "\u001b[44m",
    'bg_magenta': "\u001b[45m",
    'bg_cyan': "\u001b[46m",
    'bg_white': "\u001b[47m",
    'bg_bright_black': "\u001b[100m",
    'bg_bright_red': "\u001b[101m",
    'bg_bright_green': "\u001b[102m",
    'bg_bright_yellow': "\u001b[103m",
    'bg_bright_blue': "\u001b[104m",
    'bg_bright_magenta': "\u001b[105m",
    'bg_bright_cyan': "\u001b[106m",
    'bg_bright_white': "\u001b[107m",

    // 重置
    'reset': "\u001b[0m"
};

colorize := (text => "", fg => "white", bg => "bg_black") -> {
    fg_color := colors.{fg};
    bg_color := colors.{bg};
    return fg_color + bg_color + text + colors.reset;
};

width := 120;
height := 40;

// 数学函数集合
math_functions := {
    'sine': (x?, t?) -> stdlib.math.sin(x + t),
    'cosine': (x?, t?) -> stdlib.math.cos(x + t),
    'wave': (x?, t?) -> stdlib.math.sin(x) * stdlib.math.cos(x + t),
    'pulse': (x?, t?) -> stdlib.math.sin(x * 3.0 + t) * stdlib.math.exp(-x * x / 10.0),
    'spiral': (x?, t?) -> stdlib.math.sin(x + t) * x / 10.0,
    'damped': (x?, t?) -> stdlib.math.sin(x * 2.0 + t) * stdlib.math.exp(-stdlib.math.abs(x) / 5.0)
};

// 获取函数的颜色映射
get_function_color := (func_name?) -> {
    color_map := {
        'sine': colors.bright_red,
        'cosine': colors.bright_blue,
        'wave': colors.bright_green,
        'pulse': colors.bright_yellow,
        'spiral': colors.bright_magenta,
        'damped': colors.bright_cyan
    };
    return color_map.{func_name};
};

// 绘制坐标轴
draw_axes := (canvas?) -> {
    // X轴 (中间)
    y_center := height / 2;
    x := mut 0;
    while (x < width) {
        canvas[y_center][x] = colorize("─", "white", "bg_black");
        x = x + 1;
    };
    
    // Y轴 (中间)
    x_center := width / 2;
    y := mut 0;
    while (y < height) {
        canvas[y][x_center] = colorize("│", "white", "bg_black");
        y = y + 1;
    };
    
    // 原点
    canvas[y_center][x_center] = colorize("┼", "bright_white", "bg_black");
    
    return canvas;
};

// 绘制函数曲线
plot_function := (canvas?, func_name?, func?, time?) -> {
    color := get_function_color(func_name);
    
    x_pixel := mut 0;
    while (x_pixel < width) {
        // 将像素坐标转换为数学坐标
        x_math := (x_pixel - width / 2.0) / 10.0;
        
        // 计算函数值
        y_math := func(x_math, time);
        
        // 将数学坐标转换为像素坐标
        y_pixel := height / 2 - stdlib.math.round(y_math * 8.0);
        
        // 确保在画布范围内
        if (y_pixel >= 0 and y_pixel < height) {
            // 选择字符
            char := if (stdlib.math.abs(y_math) > 1.5) {
                "█"
            } else if (stdlib.math.abs(y_math) > 1.0) {
                "▓"
            } else if (stdlib.math.abs(y_math) > 0.5) {
                "▒"
            } else {
                "░"
            };
            
            canvas[y_pixel][x_pixel] = color + char + colors.reset;
        };
        
        x_pixel = x_pixel + 1;
    };
    
    return canvas;
};

// 创建空画布
create_canvas := () -> {
    canvas := mut ();
    y := mut 0;
    while (y < height) {
        row := mut ();
        x := mut 0;
        while (x < width) {
            row = row + (mut " ",);
            x = x + 1;
        };
        canvas = canvas + (row,);
        y = y + 1;
    };
    return canvas;
};

// 渲染画布
render_canvas := (canvas?, frame?, current_functions?) -> {
    // 清屏
    stdlib.io.println("\u001b[2J\u001b[H");
    
    // 标题
    stdlib.io.println(colorize("📊 数学函数可视化器 - 第" + stdlib.types.to_string(frame) + "帧 📊", "bright_yellow", "bg_black"));
    
    // 显示当前绘制的函数
    func_display := mut "当前函数: ";
    i := mut 0;
    while (i < lengthof current_functions) {
        func_name := current_functions[i];
        color := get_function_color(func_name);
        func_display = func_display + color + func_name + colors.reset + " ";
        i = i + 1;
    };
    stdlib.io.println(func_display);
    stdlib.io.println("");
    
    // 输出画布
    y := mut 0;
    while (y < height) {
        x := mut 0;
        while (x < width) {
            stdlib.io.print(canvas[y][x]);
            x = x + 1;
        };
        stdlib.io.println("");
        y = y + 1;
    };
    
    // 说明
    stdlib.io.println("");
    stdlib.io.println(colorize("X轴: -6 到 +6 | Y轴: -5 到 +5", "bright_cyan", "bg_black"));
};

// 主动画循环
frame := mut 0;
max_frames := 300;

// 函数组合序列
function_sequences := (
    ("sine",),
    ("cosine",),
    ("sine", "cosine"),
    ("wave",),
    ("pulse",),
    ("spiral",),
    ("damped",),
    ("sine", "wave", "pulse"),
    ("cosine", "spiral", "damped")
);
stdlib.io.println(colorize("欢迎使用数学函数可视化器! 📈", "bright_green", "bg_black"));
while (frame < max_frames) {
    // 时间参数 (用于动画)
    time := frame * 0.2;
    
    // 选择当前函数组合
    sequence_index := (frame / 30) % lengthof function_sequences;
    current_functions := function_sequences[sequence_index];
    
    // 创建新画布
    canvas := mut create_canvas();
    
    // 绘制坐标轴
    canvas = draw_axes(canvas);
    
    // 绘制所有选中的函数
    func_index := mut 0;
    while (func_index < lengthof current_functions) {
        func_name := current_functions[func_index];
        func := math_functions.{func_name};
        canvas = plot_function(canvas, func_name, func, time);
        func_index = func_index + 1;
    };
    // 渲染画布
    render_canvas(canvas, frame, current_functions);
    
    // 延迟
    delay := mut 0;
    while (delay < 100000) {
        delay = delay + 1;
    };
    
    frame = frame + 1;
};

stdlib.io.println(colorize("数学可视化演示结束! 🎭", "bright_magenta", "bg_black"));

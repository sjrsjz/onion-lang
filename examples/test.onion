// 这是一个Onion语言测试文件
A := (mut undefined,);
A[0] = A;
return A;

@required stdlib;
stdlib.io.println("======== Onion语言测试文件 ========");

Result := (result_pair?, result => mut undefined) -> (
    result_pair : {
        is_ok => () -> keyof keyof self,
        is_err => () -> not keyof keyof self,
        map => (f?) -> {
            if (self.is_ok()) {
                return result(true : f(valueof self));
            } else {
                return result(false : valueof self);
            }
        },
        map_err => (f?) -> {
            if (self.is_err()) {
                return result(false : f(valueof self));
            } else {
                return result(true : valueof self);
            }
        },
    }
);

//Result.parameter.result = Result;

Ok := (v?) -> Result(true : v);
Err := (v?) -> Result(false : v);

@required stdlib;
stdlib.io.println("test");
stdlib.io.println(Result(sync () -> {"A"[-1]}()).map_err((err?) -> "捕获到错误")); // overflow error? wtf

return;

// 斐波那契函数
fib := mut (n?) -> {
    if (n <= 1) {
        return n;
    };
    return this(n - 1) + this(n - 2);
};

stdlib.io.println("斐波那契数列第4个数是:", fib(4));
stdlib.io.println("-------------------------");

// 测试对象和属性
person := {
    "name": mut "张三",
    "age": 25
};
stdlib.io.println(person);

stdlib.io.println("姓名:", person.name);
stdlib.io.println("年龄:", person.age);

// 修改可变属性
person.name = "李四";
stdlib.io.println("修改后姓名:", person.name);
stdlib.io.println("======== 测试结束 ========");

stdlib.io.println([1,2,3,4,5,6,7] |> (x?) -> x * 2);
stdlib.io.println(
    {
        [1,2,3,4,5,6,7] | (x?) -> x < 5
    }.collect()
);

classA := (struct?, interface => mut {
    print => () -> {
        stdlib.io.println("这是类A的print方法");
    },
    toString => () -> "类A的字符串表示: " + stdlib.types.to_string(self)
}) -> struct : interface;

classB := (struct?, interface => mut {
    print => () -> {
        stdlib.io.println("这是类B的print方法");
    },
    toString => () -> "类B的字符串表示: " + stdlib.types.to_string(self)
}) -> struct : interface;


isinstance := (obj?, class?) -> (valueof obj) is class.parameter.interface;

instanceA := #classA mut {
    "name": "实例A",
    "value": 42
};

stdlib.io.println("实例A的名称:", instanceA.name);
instanceA.print();
stdlib.io.println("实例A的字符串表示:", instanceA.toString());

if (isinstance(instanceA, classA)) {
    stdlib.io.println("instanceA 是 classA 的实例");
} else {
    stdlib.io.println("instanceA 不是 classA 的实例");
};

if (isinstance(instanceA, classB)) {
    stdlib.io.println("instanceA 是 classB 的实例");
} else {
    stdlib.io.println("instanceA 不是 classB 的实例");
};

try_or := (f?, except?) -> {
    result := sync f();
    if (keyof result) {
        return valueof result;
    } else {
        return except(err => valueof result);
    }
};

stdlib.io.println(
    try_or(
        f => () -> {
        "A"[-1]
        },
        except => (err?) -> "捕获到错误: " + err
    )
);

async_foo := () -> {
    f1 := () -> {
        i := mut 0;
        while (i < 50) {
            stdlib.io.println("f1:", i);
            i = i + 1;
        }
    };
    f2 := () -> {
        i := mut 0;
        while (i < 50) {
            stdlib.io.println("f2:", i);
            i = i + 1;
        }
    };
    sync f1(); // 异步运行f1，会向异步任务池推入同步函数f1
    sync f2(); // 异步运行f2，会向异步任务池推入同步函数f2
};

// 同步启动异步调度器，使用async_foo()作为调度器的初始任务
async async_foo();

stdlib.io.println("sin(0.5):", stdlib.math.sin(0.5));
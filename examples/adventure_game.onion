// Text Adventure Game: Magic Forest Exploration
@required 'stdlib';
@include "std/tui_colors.onion";

// Simple pseudo-random number generator
rand_seed := mut 12345;
random := () -> {
    rand_seed = (rand_seed * 1103515245 + 12345) % 2147483648;
    return rand_seed / 2147483648.0;
};

// Game state
player := {
    "name": "Adventurer",
    "health": mut 100,
    "magic": mut 50,
    "items": mut ("Torch", "Bread"),
    "location": mut "forest_entrance"
};

// Game world map
world := {
    'forest_entrance': {
        "name": "Forest Entrance",
        "description": "You stand at the entrance of a mysterious forest. Ancient trees tower into the sky, and a mysterious whisper floats on the breeze.",
        "exits": ('north': "deep_forest", 'east': "crystal_cave"),
        "items": ("Magic Potion",),
        "events": ("encounter_fairy",)
    },
    'deep_forest': {
        "name": "Deep Forest",
        "description": "Dense leaves block out the sun, with only scattered rays reaching the forest floor. You hear a mysterious roar in the distance.",
        "exits": ('south': "forest_entrance", 'west': "ancient_tree", 'north': "dragon_lair"),
        "items": ("Elven Bow",),
        "events": ("encounter_wolf",)
    },
    'crystal_cave': {
        "name": "Crystal Cave",
        "description": "Crystals of many colors shimmer in the cave, and the air is filled with magical energy.",
        "exits": ('west': "forest_entrance", 'north': "treasure_room"),
        "items": ("Crystal Shard",),
        "events": ("find_treasure",)
    },
    'ancient_tree': {
        "name": "Ancient Tree",
        "description": "A giant ancient tree stands before you, its trunk covered in old runes.",
        "exits": ('east': "deep_forest",),
        "items": ("Fruit of Wisdom",),
        "events": ("tree_spirit",)
    },
    'dragon_lair': {
        "name": "Dragon Lair",
        "description": "A dark cave with gold and gems scattered on the ground. You sense the presence of a powerful magical creature.",
        "exits": ('south': "deep_forest",),
        "items": ("Dragon Scale", "Gold",),
        "events": ("final_boss",)
    },
    'treasure_room': {
        "name": "Treasure Room",
        "description": "A secret treasure room filled with glittering treasures.",
        "exits": ('south': "crystal_cave",),
        "items": ("Legendary Sword", "Magic Amulet"),
        "events": ("victory",)
    }
};

// Random event system
events := {
    'encounter_fairy': {
        "description": "A beautiful fairy appears before you, her wings glowing softly.",
        "options": (
            ('Talk to the fairy': "fairy_talk"),
            ('Give a gift to the fairy': "fairy_gift"),
            ('Continue forward': "continue")
        )
    },
    'encounter_wolf': {
        "description": "A giant forest wolf blocks your path, its eyes shining with wild light.",
        "options": (
            ('Fight': "wolf_fight"),
            ('Try to tame': "wolf_tame"),
            ('Run away': "wolf_flee")
        )
    },
    'find_treasure': {
        "description": "You found a hidden treasure chest among the crystals!",
        "options": (
            ('Open the chest': "open_chest"),
            ('Check for traps': "check_trap"),
            ('Ignore the chest': "ignore_chest")
        )
    },
    'tree_spirit': {
        "description": "The spirit of the ancient tree awakens, its ancient voice echoing in your mind.",
        "options": (
            ('Ask for wisdom': "ask_wisdom"),
            ('Ask for power': "ask_power"),
            ('Show respect': "show_respect")
        )
    },
    'final_boss': {
        "description": "A huge red dragon emerges from the shadows! Its scales shimmer like flames.",
        "options": (
            ('Brave fight': "dragon_fight"),
            ('Try to negotiate': "dragon_talk"),
            ('Use magic': "dragon_magic")
        )
    },
    'victory': {
        "description": "Congratulations! You found the legendary treasure and became a true hero!",
        "options": (
            ('Celebrate victory': "celebrate"),
        )
    }
};

// Display current status
display_status := () -> {
    stdlib.io.println(colorize("═══ Player Status ═══", "bright_yellow", "bg_black"));
    stdlib.io.println(colorize("Name: " + player.name, "bright_green", "bg_black"));
    stdlib.io.println(colorize("Health: " + stdlib.types.to_string(player.health) + "/100", "bright_red", "bg_black"));
    stdlib.io.println(colorize("Magic: " + stdlib.types.to_string(player.magic) + "/100", "bright_blue", "bg_black"));
      items_str := mut "Items: ";
    i := mut 0;
    while (i < lengthof player.items) {
        items_str = items_str + player.items[i];
        if (i < lengthof player.items - 1) {
            items_str = items_str + ", ";
        };
        i = i + 1;
    };
    stdlib.io.println(colorize(items_str, "bright_cyan", "bg_black"));
    stdlib.io.println("");
};

// Display current location
display_location := () -> {
    current_location := world.{player.location};
    
    stdlib.io.println(colorize("🌟 " + current_location.name + " 🌟", "bright_magenta", "bg_black"));
    stdlib.io.println(colorize(current_location.description, "white", "bg_black"));
    stdlib.io.println("");
    
    // Display available exits
    stdlib.io.println(colorize("Available directions:", "bright_yellow", "bg_black"));
    exits := current_location.exits;
    i := mut 0;
    while (i < lengthof exits) {
        direction := keyof exits[i];
        destination := valueof exits[i];
        dest_name := world.{destination}.name;
        stdlib.io.println(colorize("  " + direction + " → " + dest_name, "bright_green", "bg_black"));
        i = i + 1;
    };
    stdlib.io.println("");
    
    // Display available items
    if (lengthof current_location.items > 0) {
        stdlib.io.println(colorize("Items here:", "bright_cyan", "bg_black"));
        i := mut 0;
        while (i < lengthof current_location.items) {
            stdlib.io.println(colorize("  ✨ " + current_location.items[i], "bright_white", "bg_black"));
            i = i + 1;
        };
        stdlib.io.println("");
    };
};

// Handle event
handle_event := (event_name?) -> {
    if (not keyof (sync (() -> events.{event_name}))()) { // just check if event_name exists
        return;
    };
    
    event := events.{event_name};
    stdlib.io.println(colorize("🎭 Event Occurred 🎭", "bright_magenta", "bg_black"));
    stdlib.io.println(colorize(event.description, "yellow", "bg_black"));
    stdlib.io.println("");
    
    stdlib.io.println(colorize("Your choices:", "bright_yellow", "bg_black"));
    i := mut 0;
    while (i < lengthof event.options) {
        option := event.options[i];
        choice_text := keyof option;
        stdlib.io.println(colorize(stdlib.types.to_string(i + 1) + ". " + choice_text, "bright_green", "bg_black"));
        i = i + 1;
    };
    // Simulate player choice (random selection here)
    choice := stdlib.math.floor(random() * lengthof event.options);
    selected_option := event.options[choice];
    action := valueof selected_option;
    
    stdlib.io.println("");
    stdlib.io.println(colorize("You chose: " + keyof selected_option, "bright_cyan", "bg_black"));
    
    // Handle choice result
    if (action == "fairy_talk") {
        stdlib.io.println(colorize("The fairy tells you the secrets of the forest. Your magic increases!", "bright_blue", "bg_black"));
        player.magic = player.magic + 20;
        if (player.magic > 100) { player.magic = 100; };
    } else if (action == "wolf_fight") {
        stdlib.io.println(colorize("You fought fiercely with the wolf. You won but got injured.", "bright_red", "bg_black"));
        player.health = player.health - 20;
        player.items = player.items + ("Wolf Pelt",);
    } else if (action == "open_chest") {
        stdlib.io.println(colorize("There are precious gems in the chest!", "bright_yellow", "bg_black"));
        player.items = player.items + ("Ruby",);
    } else if (action == "ask_wisdom") {
        stdlib.io.println(colorize("The tree spirit grants you wisdom. You learn healing magic!", "bright_green", "bg_black"));
        player.health = 100;
        player.magic = 100;
    } else if (action == "dragon_fight") {
        if (player.health > 50) {
            stdlib.io.println(colorize("You bravely defeat the dragon! You get the dragon's treasure!", "bright_yellow", "bg_black"));
            player.items = player.items + ("Dragon Heart", "Legendary Weapon");
        } else {
            stdlib.io.println(colorize("You lack the strength to defeat the dragon, but your courage moves it.", "bright_blue", "bg_black"));
            player.items = player.items + ("Dragon's Blessing",);
        };
    } else if (action == "celebrate") {
        stdlib.io.println(colorize("🎉 You have completed this great adventure! 🎉", "bright_magenta", "bg_black"));
        return true;
    } else {
        stdlib.io.println(colorize("You continue your adventure...", "white", "bg_black"));
    };
    
    stdlib.io.println("");
    return false;
};

// Simulate exploration
simulate_exploration := () -> {
    locations_to_visit := ("forest_entrance", "deep_forest", "crystal_cave", "ancient_tree", "dragon_lair", "treasure_room");
    
    i := mut 0;
    while (i < lengthof locations_to_visit) {
        player.location = locations_to_visit[i];
        
        // Clear screen
        stdlib.io.println("\u001b[2J\u001b[H");
        
        // Display game title
        stdlib.io.println(colorize("🗡️  Magic Forest Exploration  🗡️", "bright_yellow", "bg_black"));
        stdlib.io.println("");
        
        display_status();
        display_location();
        
        // Trigger event
        current_location := world.{player.location};
        if (lengthof current_location.events > 0) {
            event_name := current_location.events[0];
            game_ended := handle_event(event_name);
            if (game_ended) {
                break;
            };
        };
        
        // Auto pickup items
        if (lengthof current_location.items > 0) {
            j := mut 0;
            while (j < lengthof current_location.items) {
                item := current_location.items[j];
                player.items = player.items + (item,);
                stdlib.io.println(colorize("You obtained: " + item, "bright_green", "bg_black"));
                j = j + 1;
            };
            stdlib.io.println("");
        };
        
        // Delay
        delay := mut 0;
        while (delay < 300000) {
            delay = delay + 1;
        };
        
        i = i + 1;
    };
};

// Start game
stdlib.io.println(colorize("Welcome to Magic Forest Exploration!", "bright_magenta", "bg_black"));
stdlib.io.println(colorize("Press Enter to start your adventure...", "bright_cyan", "bg_black"));

simulate_exploration();

stdlib.io.println(colorize("Thank you for playing Magic Forest Exploration!", "bright_yellow", "bg_black"));
